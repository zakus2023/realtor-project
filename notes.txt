# npm install --global yarn in the main folder
# cd api
# yarn init and then follow the prompts
# yarn add cookie-parser cors dotenv express express-async-handler express-oauth2-jwt-bearer nodemon prisma @prima/
- in the api folder create a file called index.js and the .env file


INITIAL index.js content
==============================
import express from "express";
import dotenv from "dotenv";
import cookieParser from "cookie-parser";
import cors from "cors";

const port = 5000

dotenv.config();

const app = express();
app.use(express.json())
app.use(cookieParser())
app.use(cors())


app.listen(port, ()=>{
    console.log("Sever is listening on port "+ port)
})
=============================================

after that  # yarn run start

- create a folder in the api folder called prisma and create a file called schema.prisma in the folder
    - note: prisma will be used to abstract our database layer
    - also remeber to install the prisma extension in the vscode

    Hereâ€™s your Prisma schema with comprehensive comments explaining each part:


    // The `generator` block defines the Prisma Client, which is used to interact with the database.
    generator client {
        provider = "prisma-client-js" // Specifies that Prisma Client for JavaScript should be generated.
    }

    // The `datasource` block specifies the database connection description.
    datasource db {
        provider = "mongodb" // Sets MongoDB as the database provider.
        url = env("DATABASE_URL") // Reads the database URL from environment variables.
    }

    // Defines the `User` model representing users in the database.
    model User {
        id String @id @default(auto()) @map("_id") @db.ObjectId // Unique identifier, automatically generated, mapped to MongoDB `_id`.
        name String? // Optional name of the user.
        email String @unique // User's email, must be unique.
        image String? // Optional profile image URL.
        bookedVisit Json[] // Stores an array of booked visits as JSON data.
        favResidenciesiD String[] @db.ObjectId // Array of ObjectIds referring to favorite residencies.
        ownedResidencies Residency[] @relation("Owner") // One-to-many relation with the `Residency` model, where the user owns multiple residencies.
    }

    // Defines the `Residency` model representing properties available for booking.
    model Residency {
        id String @id @default(auto()) @map("_id") @db.ObjectId // Unique identifier, automatically generated, mapped to MongoDB `_id`.
        title String // Title of the residency.
        description String // Description of the residency.
        price Int // Price of the residency.
        address String // Address of the residency.
        city String // City where the residency is located.
        country String // Country where the residency is located.
        image String // Image URL for the residency.
        facilities Json // Stores residency facilities as JSON data.
        userEmail String // Stores the email of the user who owns the residency.
        owner User @relation("Owner", fields: [userEmail], references: [email]) 
        // Establishes a relationship with the `User` model, linking the residency to its owner via the user's email.

        createdAt DateTime @default(now()) // Automatically sets the creation timestamp.
        updatedAt DateTime @updatedAt // Automatically updates the timestamp when the record is modified.
    }

    Summary of Key Features:
    ==========================
    @id @default(auto()) @map("_id") @db.ObjectId: Ensures that MongoDB _id is used as the primary key.
    Relationships:
    A user can own multiple residencies (ownedResidencies).
    Residency is linked to User through the userEmail field.
    Automatic timestamps:
    createdAt defaults to the current time.
    updatedAt updates automatically when a record is modified.
    JSON fields (bookedVisit, facilities): Stores flexible data structures.
    This schema is optimized for a MongoDB-based application with user-owned properties. ðŸš€
NOTE:whiles the server is still running: In the api folder run:  npx prisma db push and   npx prisma generate

- Create a folder called config in the api folder
    - create a file called prismaConfig.js in the folder created above
- create a folder called controllers in the api folder
    - create a file called userController.js in the controllers folder
    - create a file called residenceController.js in the controllers folder
- create a folder called routes in the api folder
    - create a file called userRoute.js in the routes folder
    - create a file called residenceRoute.js in the routes folder


NB: To add data from a json file to the mongodb database
    - create a folder in the api folder called data
    - add the json file to its
    - go to https://www.mongodb.com/try/download/database-tools
    - scroll to MongoDB Command Line Database Tools Download under Tools
    - extract the file
    - open the bin folder and copy the Residency.json file into its
    - open the folder in Command Line Interface (cmd)
    - write the following command: ./mongoimport --uri mongodb+srv://userCorrect:qwertyC3600@mycluster.janfs9e.mongodb.net/aetherestate --collection Residency --type json --jsonArray --file Residency.json

    FRONT END/CLIENT
    ==================
    - for using an already existing frontend
    - I first downloaded the frontend starter pack
    - Then i created a repository on github
    - then i cd into the client folder and run the following commands
        - yarn
        - yarn run dev
    
    Starting
    ==============
    - go to google font and search for Poppins
    - select and copy the links generated and paste it in the index.html file below the meta

    - In the src folder create a folder called components > then a folder called header
    - In the header folder create the following files: Header.jsx and Header.css
    
    - In the src folder create a folder called components > then a folder called hero
    - in the hero folder create the following files: Hero.jsx and Hero.css

    NB: To add the white gradient behind the text in the hero
        - add a div in App.jsx as follows and put the Header and Hero inside the div
        - create the self closing div called the white-gradient
        - in the App.css add the following:
    NB:
    To configure the slider, create a file called the commons.js file inside the utils folder
    - import it in the Properties.jsx and use it as in file

NB: Remember to install react-outside-click-handler package



NB: install react-query. axios. dayjs, react-toastify

    use it in the App.jsx as follows:
        import React, { Suspense } from "react";
        import "./App.css";
        import Entry from "./pages/Entry";
        import { BrowserRouter as Router, Routes, Route } from "react-router-dom";
        import Layout from "./layout/Layout";
        import Listings from "./pages/Listings/Listings";
        *** import {QueryClient, QueryClientProvider} from 'react-query'

        function App() {
        const queryClient = new QueryClient()

        return (
            <div className="App">
            ***<QueryClientProvider client={queryClient}>
                <Router>
                <Suspense fallback={<div>Loading ...</div>}>
                <Routes>
                    <Route path="/" element={<Layout />}>
                    <Route index element={<Entry />} />
                    {/* Add more nested routes here as needed */}
                    <Route path="/listings" element={<Listings/>}/>
                    </Route>
                </Routes>
                </Suspense>
            </Router>
            ***</QueryClientProvider>
            
            </div>
        );
        }

        export default App;


NB: Create a folder called hooks and add the useProperties.jsx hook

    import { useQuery } from "react-query";

    // Function to fetch all properties
    async function getAllProperties() {
    // Implement your data fetching logic here
    // For example, using fetch or axios to retrieve data from an API
    }

    function useProperties() {
    // Destructure the return values from useQuery
    const { data, isError, isLoading, refetch } = useQuery(
        ["allProperties"], // Unique key for the query
        getAllProperties, // Function that fetches the data
        { refetchOnWindowFocus: false } // Configuration options
    );

    // Return the relevant data and functions
    return {
        data,      // The fetched data
        isLoading, // Boolean indicating if the query is loading
        isError,   // Boolean indicating if there was an error
        refetch,   // Function to manually refetch the data
    };
    }

    export default useProperties;


Import and use the useProperties.jsx inside the Listings.jsx

NB: in the utils folder create a file called api.js

NB: Remember to install react-spinners, lodash

NB: To add the Map Remember to install react-leaflet@4.2.1 and leaflet in the frontend
- Create the Map component and use it in the Listing.jsx
- GeoCoderMarker.jsx and use it inside the Map.jsx

NB: For Authentication I will implement Auth0
    - signup or sign in
    - go to the application page
    - create new application
    - name it
    - single page web application
    - react
    - settings
    - Allowed callback url: http://localhost:5173, http://localhost:5173/, http://localhost:5173/callback
    - Allowed Logout uri: http://localhost:5173
    - Allowed Web origin: http://localhost:5173

    Ensure API is Configured in Auth0
        Go to your Auth0 Dashboard.
        Click on Applications > APIs in the sidebar.
        Check if you have an API created with http://localhost:5000 as the Identifier (Audience).
        If not, create one:
        Name: My Local API
        Identifier: http://localhost:5000
        Signing Algorithm: Auth0


    - yarn add @auth0/auth0-react@2.0.1
    - Use the Auth0 in the main.jsx file as follows:
        NB: Copy the domain from Auth0 console: domain='dev-ccmy6um2itf0jid5.us.auth0.com'
            
            import { StrictMode } from 'react'
            import { createRoot } from 'react-dom/client'
            import './index.css'
            import App from './App.jsx'
            import {Auth0Provider} from '@auth0/auth0-react'

            createRoot(document.getElementById('root')).render(
            <StrictMode>
                <Auth0Provider
                domain='dev-ccmy6um2itf0jid5.us.auth0.com'
                clientId='lHlNWSq1xLOkWXpViqAnLCjmT0hppfqq'
                authorizationParams={
                {
                redirect_uri:"http://localhost:5173"
                }
                }
                audience="http://localhost:5000"
                scope="openid profile email"
                >
                <App />
                </Auth0Provider>
                
            </StrictMode>,
            )
    
    - yarn add @mantine/core @mantine/dates @mantine/form @emotion/react @mantine/hooks OR yarn add antd @ant-design/icons
    - Then open Header.jsx and add the following:
    - create a component called ProfileMenu.jsx and use it in the Header.jsx

SAVE USER INFORMATION IN A CONTEXT
    - create a folder in the src folder called context
    - create a file called UserDetailsContext.js in the folder created above
        - use the UserDetailsContext context in the App.jsx file
            import React, { Suspense, useState } from "react";
import "./App.css";
import Entry from "./pages/Entry";
import { BrowserRouter as Router, Routes, Route } from "react-router-dom";
import Layout from "./layout/Layout";
import Listings from "./pages/Listings/Listings";
import { QueryClient, QueryClientProvider } from "react-query";
import { ReactQueryDevtools } from "react-query/devtools";
import { ToastContainer } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import Listing from "./pages/listing/Listing";
import UserDetailsContext from "./context/UserDetailsContext";

function App() {
  const queryClient = new QueryClient();

 *** const [userDetails, setUserDetails] = useState({
    favourites: [],
    bookings: [],
    token: null,
  });

  return (
    <div className="App">
     *** <UserDetailsContext.Provider value={{ userDetails, setUserDetails }}>
        <QueryClientProvider client={queryClient}>
          <Router>
            <Suspense fallback={<div>Loading ...</div>}>
              <Routes>
                <Route path="/" element={<Layout />}>
                  <Route index element={<Entry />} />
                  {/* Add more nested routes here as needed */}
                  <Route path="/listings" element={<Listings />} />
                  <Route path="/listing/:id" element={<Listing />} />
                </Route>
              </Routes>
            </Suspense>
          </Router>
          <ToastContainer />
          <ReactQueryDevtools initialIsOpen={false} />
        </QueryClientProvider>
      ***</UserDetailsContext.Provider>
    </div>
  );
}

export default App;
-

- Then inside the api.js create the api call function for create user as follows:
    -


- Then open Layout.jsx and use the useContext as follows:

//Import necessary dependencies from React and other libraries
import React, { useContext, useEffect } from "react"; // React for component creation, useContext for state management, and useEffect for side effects
import "./Layout.css"; // Importing CSS styles for the Layout component
import Header from "../Components/Header/Header"; // Importing the Header component
import Footer from "../Components/Footer/Footer"; // Importing the Footer component
import { Outlet } from "react-router-dom"; // Outlet is used to render child components based on the route
import { useAuth0 } from "@auth0/auth0-react"; // Auth0 hook for authentication management
import UserDetailsContext from "../context/UserDetailsContext"; // Importing user details context for global state management
import { useMutation } from "react-query"; // Importing useMutation for API requests
import { createUser } from "../utils/api"; // Function to create a user in the backend

// Define the Layout component
function Layout() {
  // Extract authentication-related data from Auth0
  const { isAuthenticated, user } = useAuth0(); // `isAuthenticated` tells if the user is logged in, `user` contains user details

  // Access the user details context to update user-related state globally
  const { setUserDetails } = useContext(UserDetailsContext);

  // Define a mutation function to create a user in the database when they log in
  const { mutate } = useMutation({
    mutationKey: [user?.email], // The mutation is identified by the user's email
    mutationFn: () => createUser(user?.email), // Calls the API function to create a user
  });

  // useEffect runs when `isAuthenticated` changes
  useEffect(() => {
    if (isAuthenticated) {
      mutate(); // If the user is authenticated, call the mutation to register or update the user in the database
    }
  }, [isAuthenticated]); // Dependency array ensures this effect runs only when `isAuthenticated` changes

  return (
    <>
      {/* Wrapper div with styling for background color and overflow */}
      <div style={{ background: "var(--black)", overflow: "hidden" }}>
        <Header /> {/* Render the Header component */}
        <Outlet />{" "}
        {/* Render the child components based on the current route */}
        <Footer /> {/* Render the Footer component */}
      </div>
    </>
  );
}

// Export the Layout component so it can be used in other parts of the application
export default Layout;

- Then inside the config folder create a file called auth0Config.js

- update the register route with the token

BOOKING MODAL
- in the hooks folder create a file called useAuthCheck.jsx and use it in the components where you want to check authentication
 example in the: listing component for booking a visit
- Create a component called BookingModal in the components folder




   
